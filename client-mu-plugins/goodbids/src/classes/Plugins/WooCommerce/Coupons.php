<?php
/**
 * WooCommerce Coupons Functionality
 *
 * @since 1.0.0
 * @package GoodBids
 */

namespace GoodBids\Plugins\WooCommerce;

use GoodBids\Auctions\Bids;
use GoodBids\Auctions\Rewards;
use GoodBids\Frontend\Notices;
use WC_Coupon;
use WC_Product;

/**
 * Class for Coupons Functionality
 *
 * @since 1.0.0
 */
class Coupons {

	/**
	 * @since 1.0.0
	 * @var string
	 */
	const REWARD_COUPON_META_KEY = '_goodbids_reward_%d_coupon_id';

	/**
	 * @since 1.0.0
	 * @var string
	 */
	const FREE_BID_COUPON_META_KEY = '_goodbids_free_bid_%d_coupon_id';

	/**
	 * Initialize Coupons
	 *
	 * @since 1.0.0
	 */
	public function __construct() {
		// Fixes a known issue with WP VIP and WooCoupons.
		$this->wp_vip_db_fix();

		// Automatically apply coupons at checkout.
		$this->apply_cart_coupons();
	}

	/**
	 * Generate or retrieve the Reward Coupon Code for this Auction.
	 *
	 * @since 1.0.0
	 *
	 * @param int $auction_id
	 * @param int $reward_id
	 *
	 * @return ?string
	 */
	public function get_reward_coupon_code( int $auction_id, int $reward_id ): ?string {
		$reward = goodbids()->auctions->rewards->get_product( $auction_id );

		if ( ! $reward ) {
			return null;
		}

		if ( $reward->get_id() !== $reward_id ) {
			// Reward ID does not match the Auction Reward ID.
			return null;
		}

		$existing = get_post_meta( $reward_id, sprintf( self::REWARD_COUPON_META_KEY, $auction_id ), true );

		if ( $existing ) {
			// Make sure it's still valid.
			if ( wc_get_coupon_id_by_code( $existing ) ) {
				return $existing;
			}
		}

		$coupon_code  = 'GB_REWARD_' . strtoupper( wc_rand_hash() );
		$reward_price = $reward->get_price( 'edit' );
		$description  = sprintf(
			'%s: %d (%s: %d)',
			__( 'Autogenerated Coupon Code for Auction ID', 'goodbids' ),
			esc_html( $auction_id ),
			__( 'Product ID', 'goodbids' ),
			esc_html( $reward_id )
		);

		$coupon = new WC_Coupon();
		$coupon->set_code( $coupon_code ); // Coupon code.
		$coupon->set_description( $description );

		// Restrictions.
		$coupon->set_individual_use( true );
		$coupon->set_usage_limit_per_user( 1 );
		$coupon->set_usage_limit( 1 );
		$coupon->set_limit_usage_to_x_items( 1 ); // Limit to 1 item.
		$coupon->set_email_restrictions( goodbids()->users->get_emails() ); // Restrict by user email(s).
		$coupon->set_product_ids( [ $reward_id ] ); // Restrict to this Reward Product.

		// Amount.
		$coupon->set_discount_type( 'percent' );
		$coupon->set_amount( 100 ); // 100% Discount.
		$coupon->set_maximum_amount( $reward_price ); // Additional price restriction.

		$coupon->save();

		update_post_meta( $reward_id, sprintf( self::REWARD_COUPON_META_KEY, $auction_id ), $coupon_code );

		return $coupon_code;
	}

	/**
	 * Generate or retrieve the Free Bid Coupon Code for this User.
	 *
	 * @since 1.0.0
	 *
	 * @param int $auction_id
	 * @param int $bid_variation_id
	 *
	 * @return ?string
	 */
	public function get_free_bid_coupon_code( int $auction_id, int $bid_variation_id ): ?string {
		$bid_variation = goodbids()->auctions->bids->get_variation( $auction_id );

		if ( ! $bid_variation ) {
			return null;
		}

		if ( $bid_variation->get_id() !== $bid_variation_id ) {
			// Bid Product ID does not match the Auction Bid Product ID.
			return null;
		}

		$existing = get_user_meta( get_current_user_id(), sprintf( self::FREE_BID_COUPON_META_KEY, $auction_id ), true );

		if ( $existing ) {
			// Make sure it's still valid.
			if ( wc_get_coupon_id_by_code( $existing ) ) {
				return $existing;
			}
		}

		$coupon_code  = 'GB_FREEBID_' . strtoupper( wc_rand_hash() );
		$reward_price = $bid_variation->get_price( 'edit' );
		$description  = sprintf(
			'%s: %d',
			__( 'Autogenerated Free Bid Coupon Code for Auction ID', 'goodbids' ),
			esc_html( $auction_id )
		);

		$coupon = new WC_Coupon();
		$coupon->set_code( $coupon_code ); // Coupon code.
		$coupon->set_description( $description );

		// Restrictions.
		$coupon->set_individual_use( true );
		$coupon->set_usage_limit_per_user( 1 );
		$coupon->set_usage_limit( 1 );
		$coupon->set_limit_usage_to_x_items( 1 ); // Limit to 1 item.
		$coupon->set_email_restrictions( goodbids()->users->get_emails() ); // Restrict by user email(s).
		$coupon->set_product_ids( [ $bid_variation_id ] ); // Restrict to this Reward Product.

		// Amount.
		$coupon->set_discount_type( 'percent' );
		$coupon->set_amount( 100 ); // 100% Discount.
		$coupon->set_maximum_amount( $reward_price ); // Additional price restriction.

		$coupon->save();

		update_user_meta( get_current_user_id(), sprintf( self::FREE_BID_COUPON_META_KEY, $auction_id ), $coupon_code );

		return $coupon_code;
	}

	/**
	 * Apply Reward Coupon to cart, if applicable.
	 *
	 * @since 1.0.0
	 * @return void
	 */
	private function apply_cart_coupons(): void {
		add_filter(
			'woocommerce_add_to_cart_redirect',
			function ( string $url, ?WC_Product $product ) {
				$product = goodbids()->woocommerce->get_add_to_cart_product( $product );

				if ( ! $product ) {
					return $url;
				}

				$product_type = goodbids()->auctions->get_product_type( $product->get_id() );
				$redirect_url = wc_get_page_permalink( 'myaccount' );
				$coupon_code  = false;

				if ( ! $product_type ) {
					return $url;
				}

				$auction_id = goodbids()->auctions->get_auction_id_from_product_id( $product->get_id() );

				if ( ! $auction_id ) {
					return add_query_arg( 'gb-notice', Notices::AUCTION_NOT_FOUND, $url );
				}

				if ( Rewards::ITEM_TYPE === $product_type ) {

					$redirect_url = get_permalink( $auction_id );

					if ( ! goodbids()->auctions->is_current_user_winner( $auction_id ) ) {
						WC()->cart->empty_cart();
						return add_query_arg( 'gb-notice', Notices::NOT_AUCTION_WINNER, $url );
					}

					$coupon_code = $this->get_reward_coupon_code( $auction_id, $product->get_id() );

					if ( ! $coupon_code ) {
						return add_query_arg( 'gb-notice', Notices::GET_REWARD_COUPON_ERROR, $redirect_url );
					}
				} elseif ( Bids::ITEM_TYPE === $product_type ) {
					if ( ! empty( $_REQUEST['use-free-bid'] ) ) { // phpcs:ignore
						if ( ! goodbids()->auctions->are_free_bids_allowed( $auction_id ) ) {
							return add_query_arg( 'gb-notice', Notices::FREE_BIDS_NOT_ELIGIBLE, $url );
						}

						if ( ! goodbids()->users->get_available_free_bid_count() ) {
							return add_query_arg( 'gb-notice', Notices::NO_AVAILABLE_FREE_BIDS, $url );
						}

						$coupon_code = $this->get_free_bid_coupon_code( $auction_id, $product->get_id() );

						if ( ! $coupon_code ) {
							return add_query_arg( 'gb-notice', Notices::GET_FREE_BID_COUPON_ERROR, $redirect_url );
						}
					}
				}

				// Only apply Coupon once.
				if ( $coupon_code && ! WC()->cart->has_discount( $coupon_code ) ) {
					// Apply the Coupon.
					if ( ! WC()->cart->add_discount( $coupon_code ) ) {
						// TODO: Log Error.
						return add_query_arg( 'gb-notice', Notices::APPLY_COUPON_ERROR, $redirect_url );
					}
				}

				return $url;
			},
			10,
			2
		);
	}

	/**
	 * From WP VIP Support:
	 * This fixes an error that is a known issue of WP VIP (specifically an incompatibility between HyperDB and Woo Coupons).
	 *
	 * While we're still waiting on an official fix here, this filter is being used as a workaround where at least two other scenarios the errors have appeared.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	private function wp_vip_db_fix(): void {
		add_filter(
			'query',
			function ( string $query ): string {
				if ( ! str_contains( $query, 'SELECT' ) || ! str_contains( $query, 'FOR UPDATE' ) ) {
					return $query;
				}

				/** @var \hyperdb $wpdb */
				global $wpdb;

				if ( ! method_exists( $wpdb, 'send_reads_to_master' ) ) {
					return $query;
				}

				$wpdb->send_reads_to_master();

				return $query;
			}
		);
	}
}
